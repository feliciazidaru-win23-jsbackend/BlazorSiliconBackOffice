@page "/User/DeleteUsers"
@using System.Text.Json
@using Microsoft.AspNetCore.Authorization
@using System.Text
@inject HttpClient Http
@rendermode InteractiveServer
@attribute [StreamRendering]
@attribute [Authorize]
<h3>Delete Users</h3>

@if (users == null)
{
    <p>Loading...</p>
}
else if (!users.Any())
{
    <p>No users found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>City</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.UserProfile.FirstName</td>
                    <td>@user.UserProfile.LastName</td>
                    <td>@user.Email</td>
                    <td>@user.UserAddress.City</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeleteUser(user.Email)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (!string.IsNullOrEmpty(deleteStatusMessage))
{
    <div>@deleteStatusMessage</div>
}

@code {
    private List<ApplicationUser> users;
    private string deleteStatusMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        var response = await Http.GetAsync("https://userprovidersilicon.azurewebsites.net/api/GetUsers?code=bmofQ3-fcq4yodLlF5G3X-Av5yk6UFi23_Mq8Z6uo4rbAzFuwxW1xQ%3D%3D");
        if (response.IsSuccessStatusCode)
        {
            var responseContent = await response.Content.ReadAsStringAsync();
            users = JsonSerializer.Deserialize<List<ApplicationUser>>(responseContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        }
    }

    private async Task DeleteUser(string email)
    {
            // Construct the URL with email parameter (same as before)
            string baseUrl = "https://userprovidersilicon.azurewebsites.net/api/DeleteUser";
            string functionCode = "EcfMYJyH6GZRia1MRCOGrPGsdEQF_P79z6XPeMH8PU_0AzFumwc_QQ%3D%3D";
            string url = $"{baseUrl}?code={functionCode}";

            // Create a new object to hold email data for the POST request
            var deleteUserData = new { Email = email };

            // Send the POST request with the email data in the body
            var content = JsonSerializer.Serialize(deleteUserData);
            var stringContent = new StringContent(content, Encoding.UTF8, "application/json");
            var response = await Http.PostAsync(url, stringContent);
            if (response.IsSuccessStatusCode)
            {
                // Remove the user from the list
                var userToRemove = users.FirstOrDefault(u => u.Email == email);
                if (userToRemove != null)
                {
                    users.Remove(userToRemove);
                    deleteStatusMessage = $"User with email '{email}' has been successfully deleted.";
                }
            }
            else
            {
                // Handle error
                deleteStatusMessage = $"Failed to delete user with email '{email}'. Error: {response.ReasonPhrase}";
            }
        
    }
 

    public class ApplicationUser
    {
        public string Id { get; set; }
        public string UserName { get; set; }
        public string NormalizedUserName { get; set; }
        public string Email { get; set; }
        public string NormalizedEmail { get; set; }
        public bool EmailConfirmed { get; set; }
        public string PasswordHash { get; set; }
        public string SecurityStamp { get; set; }
        public string ConcurrencyStamp { get; set; }
        public string PhoneNumber { get; set; }
        public bool PhoneNumberConfirmed { get; set; }
        public bool TwoFactorEnabled { get; set; }
        public DateTimeOffset? LockoutEnd { get; set; }
        public bool LockoutEnabled { get; set; }
        public int AccessFailedCount { get; set; }
        public string UserProfileId { get; set; }
        public UserProfile UserProfile { get; set; }
        public string UserAddressId { get; set; }
        public UserAddress UserAddress { get; set; }
    }

    public class UserProfile
    {
        public string Id { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string ProfilePicture { get; set; }
        public string ProfileImageUrl { get; set; }
        public string Biography { get; set; }
    }

    public class UserAddress
    {
        public string Id { get; set; }
        public string AddressLine_1 { get; set; }
        public string AddressLine_2 { get; set; }
        public string PostalCode { get; set; }
        public string City { get; set; }
    }
}