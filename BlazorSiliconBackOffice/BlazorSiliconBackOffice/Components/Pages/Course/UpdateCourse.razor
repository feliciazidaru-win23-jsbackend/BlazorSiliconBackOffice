@page "/Course/UpdateCourse/{CourseId}"

@using BlazorSiliconBackOffice.Components.GraphQL
@using System.Net.Http.Json
@using System.Text.Json
@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http
@inject NavigationManager Navigation
@attribute [Authorize]
@rendermode InteractiveServer

<h3>Update Course</h3>

<EditForm Model="course" OnValidSubmit="HandleValidSubmit" FormName="UpdateCourseModel">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="title">Title</label>
        <InputText id="title" @bind-Value="course.Title" />
    </div>
    <!-- Other form fields here -->
    <button type="submit">Update Course</button>
</EditForm>

@if (statusMessage != null)
{
    <div class="status-message">@statusMessage</div>
}

@code {
    [Parameter]
    public string CourseId { get; set; }

    private CourseUpdateRequest course = new CourseUpdateRequest
        {
            Authors = new List<AuthorUpdateRequest> { new AuthorUpdateRequest { Name = "" } },
            Prices = new PricesUpdateRequest { Currency = "", Price = 0, Discount = 0 },
            Content = new ContentUpdateRequest
            {
                Description = "",
                Includes = Array.Empty<string>(),
                ProgramDetails = new List<ProgramDetailItemUpdateRequest>
            {
                new ProgramDetailItemUpdateRequest { Id = 1, Title = "", Description = "" },
                new ProgramDetailItemUpdateRequest { Id = 2, Title = "", Description = "" },
                new ProgramDetailItemUpdateRequest { Id = 3, Title = "", Description = "" },
                new ProgramDetailItemUpdateRequest { Id = 4, Title = "", Description = "" },
                new ProgramDetailItemUpdateRequest { Id = 5, Title = "", Description = "" },
                new ProgramDetailItemUpdateRequest { Id = 6, Title = "", Description = "" }
            }
            },
            ImageUri = "",
            ImageHeaderUri = "",
            IsBestseller = false,
            IsDigital = false,
            Categories = Array.Empty<string>(),
            Title = "",
            Ingress = "",
            StarRating = 0,
            Reviews = "",
            LikesInPercent = "",
            Likes = "",
            Hours = ""
        };

    private string? statusMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadCourse(CourseId);
        course.Id = CourseId;
    }

    private async Task LoadCourse(string courseId)
    {
        var query = new GraphQlQuery
            {
                Query = @"query ($id: ID!) { getCourseById(id: $id) { id title imageUri imageHeaderUri isBestseller isDigital categories title ingress starRating reviews likesInPercent likes hours authors { name } prices { currency price discount } content { description includes programDetails { id title description } } } }",
                Variables = new { id = courseId }
            };

        var response = await Http.PostAsJsonAsync("https://courses-provider.azurewebsites.net/api/graphql?code=G2MRX03uMzcUwrgGtP75jTVAcUQB_UAz4ze_kHy0dn4JAzFu0doYJw%3D%3D", query);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<GraphQlResponse>();
            if (result?.Data.TryGetProperty("getCourseById", out var courseElement) == true)
            {
                course = new CourseUpdateRequest
                    {
                        Id = courseElement.GetProperty("id").GetString(),
                        Title = courseElement.GetProperty("title").GetString(),
                        ImageUri = courseElement.GetProperty("imageUri").GetString(),
                        ImageHeaderUri = courseElement.GetProperty("imageHeaderUri").GetString(),
                        IsBestseller = courseElement.GetProperty("isBestseller").GetBoolean(),
                        IsDigital = courseElement.GetProperty("isDigital").GetBoolean(),
                        Categories = courseElement.GetProperty("categories").EnumerateArray().Select(c => c.GetString()).ToArray(),
                        Ingress = courseElement.GetProperty("ingress").GetString(),
                        StarRating = courseElement.GetProperty("starRating").GetDecimal(),
                        Reviews = courseElement.GetProperty("reviews").GetString(),
                        LikesInPercent = courseElement.GetProperty("likesInPercent").GetString(),
                        Likes = courseElement.GetProperty("likes").GetString(),
                        Hours = courseElement.GetProperty("hours").GetString(),
                        Authors = courseElement.GetProperty("authors").EnumerateArray().Select(a => new AuthorUpdateRequest { Name = a.GetProperty("name").GetString() }).ToList(),
                        Prices = new PricesUpdateRequest
                        {
                            Currency = courseElement.GetProperty("prices").GetProperty("currency").GetString(),
                            Price = courseElement.GetProperty("prices").GetProperty("price").GetDecimal(),
                            Discount = courseElement.GetProperty("prices").GetProperty("discount").GetDecimal()
                        },
                        Content = new ContentUpdateRequest
                        {
                            Description = courseElement.GetProperty("content").GetProperty("description").GetString(),
                            Includes = courseElement.GetProperty("content").GetProperty("includes").EnumerateArray().Select(i => i.GetString()).ToArray(),
                            ProgramDetails = courseElement.GetProperty("content").GetProperty("programDetails").EnumerateArray().Select(p => new ProgramDetailItemUpdateRequest
                            {
                                Id = p.GetProperty("id").GetInt32(),
                                Title = p.GetProperty("title").GetString(),
                                Description = p.GetProperty("description").GetString()
                            }).ToList()
                        }
                    };
            }
        }
    }


    private async Task HandleValidSubmit()
    {
        var query = new GraphQlQuery
            {
                Query = @"mutation ($input: CourseUpdateRequestInput!) { updateCourse(input: $input) { id title } }",
                Variables = new { input = course }
            };

        var response = await Http.PostAsJsonAsync("https://courses-provider.azurewebsites.net/api/graphql?code=G2MRX03uMzcUwrgGtP75jTVAcUQB_UAz4ze_kHy0dn4JAzFu0doYJw%3D%3D", query);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<GraphQlResponse>();
            if (result?.Data.TryGetProperty("updateCourse", out var courseElement) == true)
            {
                statusMessage = $"Course '{courseElement.GetProperty("title").GetString()}' with ID '{courseElement.GetProperty("id").GetString()}' has been updated successfully.";
            }
        }
        else
        {
            var responseContent = await response.Content.ReadAsStringAsync();
            statusMessage = $"HTTP request failed with status code: {response.StatusCode}. Response: {responseContent}";
        }
    }

    public class CourseUpdateRequest
    {
        public string Id { get; set; } = null!;
        public string? ImageUri { get; set; }
        public string? ImageHeaderUri { get; set; }
        public bool IsBestseller { get; set; }
        public bool IsDigital { get; set; }
        public string[]? Categories { get; set; }
        public string? Title { get; set; }
        public string? Ingress { get; set; }
        public decimal StarRating { get; set; }
        public string? Reviews { get; set; }
        public string? LikesInPercent { get; set; }
        public string? Likes { get; set; }
        public string? Hours { get; set; }
        public virtual List<AuthorUpdateRequest>? Authors { get; set; }
        public virtual PricesUpdateRequest? Prices { get; set; }
        public virtual ContentUpdateRequest? Content { get; set; }
    }

    public class AuthorUpdateRequest
    {
        public string? Name { get; set; }
    }
    public class ContentUpdateRequest
    {
        public string? Description { get; set; }
        public string[]? Includes { get; set; }
        public virtual List<ProgramDetailItemUpdateRequest>? ProgramDetails { get; set; }
    }

    public class PricesUpdateRequest
    {
        public string? Currency { get; set; }
        public decimal Price { get; set; }
        public decimal Discount { get; set; }
    }

    public class ProgramDetailItemUpdateRequest
    {
        public int Id { get; set; }
        public string? Title { get; set; }
        public string? Description { get; set; }
    }

    public class GraphQlResponse
    {
        public JsonElement Data { get; set; }
    }
}
