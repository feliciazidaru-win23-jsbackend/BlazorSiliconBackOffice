@page "/Course/CreateCourse"
@using BlazorSiliconBackOffice.Components.GraphQL
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http
@inject NavigationManager Navigation
@attribute [Authorize]
@rendermode InteractiveServer

<h3>Create Course</h3>

<EditForm Model="course" OnValidSubmit="HandleValidSubmit" FormName="CourseModelCreation">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="title">Title</label>
        <InputText id="title" @bind-Value="course.Title" />
    </div>
    <div>
        <label for="ingress">Ingress</label>
        <InputText id="ingress" @bind-Value="course.Ingress" />
    </div>
    <div>
        <label for="author">Author</label>
        <InputText id="author" @bind-Value="course.Authors[0].Name" />
    </div>
    <div>
        <label for="price">Price</label>
        <InputNumber id="price" @bind-Value="course.Prices.Price" />
    </div>
    <div>
        <label for="discount">Discount Price</label>
        <InputNumber id="discount" @bind-Value="course.Prices.Discount" />
    </div>
    <div>
        <label for="imageUri">Image URI</label>
        <InputText id="imageUri" @bind-Value="course.ImageUri" />
    </div>
    <div>
        <label for="imageHeaderUri">Image Header URI</label>
        <InputText id="imageHeaderUri" @bind-Value="course.ImageHeaderUri" />
    </div>
    <div>
        <label for="isBestseller">Is Bestseller</label>
        <InputCheckbox id="isBestseller" @bind-Value="course.IsBestseller" />
    </div>
    <div>
        <label for="isDigital">Is Digital</label>
        <InputCheckbox id="isDigital" @bind-Value="course.IsDigital" />
    </div>
    <div>
        <label for="starRating">Star Rating</label>
        <InputNumber id="starRating" @bind-Value="course.StarRating" />
    </div>
    <div>
        <label for="reviews">Reviews</label>
        <InputText id="reviews" @bind-Value="course.Reviews" />
    </div>
    <div>
        <label for="likesInPercent">Likes in Percent</label>
        <InputText id="likesInPercent" @bind-Value="course.LikesInPercent" />
    </div>
    <div>
        <label for="likes">Likes</label>
        <InputText id="likes" @bind-Value="course.Likes" />
    </div>
    <div>
        <label for="hours">Hours</label>
        <InputText id="hours" @bind-Value="course.Hours" />
    </div>
    <div>
        <label for="categories">Categories</label>
        <InputText id="categories" @bind-Value="course.Categories[0]" />
    </div>
    <div>
        <label for="description">Content Description</label>
        <InputTextArea id="description" @bind-Value="course.Content.Description" />
    </div>

    @foreach (var detail in course.Content.ProgramDetails)
    {
        <div class="mb-3">
            <label for="programDetailsId">Program Detail Id</label>
            <InputNumber id="programDetailsId" @bind-Value="detail.Id" />
            <label for="programDetailsTitle">Program Detail Title</label>
            <InputText id="programDetailsTitle" @bind-Value="detail.Title" />
            <label for="programDetailsDescription">Program Detail Description</label>
            <InputTextArea id="programDetailsDescription" @bind-Value="detail.Description" />
        </div>
    }
    <button type="submit">Create Course</button>
</EditForm>

@if (createdCourse != null)
{
    <h4>Course Created</h4>
    <table>
        <thead>
            <tr>
                <th>Id</th>
                <th>Title</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@createdCourse.Id</td>
                <td>@createdCourse.Title</td>
            </tr>
        </tbody>
    </table>
}

@code {
    private CourseCreateRequest course = new CourseCreateRequest
        {
            Authors = new List<AuthorCreateRequest> { new AuthorCreateRequest { Name = "" } },
            Prices = new PricesCreateRequest { Currency = "", Price = 0, Discount = 0 },
            Content = new ContentCreateRequest
            {
                Description = "",
                Includes = Array.Empty<string>(),
                ProgramDetails = new List<ProgramDetailItemCreateRequest>
            {
                new ProgramDetailItemCreateRequest { Id = 1, Title = "", Description = "" },
                new ProgramDetailItemCreateRequest { Id = 2, Title = "", Description = "" },
                new ProgramDetailItemCreateRequest { Id = 3, Title = "", Description = "" },
                new ProgramDetailItemCreateRequest { Id = 4, Title = "", Description = "" },
                new ProgramDetailItemCreateRequest { Id = 5, Title = "", Description = "" },
                new ProgramDetailItemCreateRequest { Id = 6, Title = "", Description = "" }
            }
            },
            ImageUri = "",
            ImageHeaderUri = "",
            IsBestseller = false,
            IsDigital = false,
            Categories = new string[] { "" },
            Title = "",
            Ingress = "",
            StarRating = 0,
            Reviews = "",
            LikesInPercent = "",
            Likes = "",
            Hours = ""
        };

    private Course? createdCourse;

    private async Task HandleValidSubmit()
    {
        var query = new GraphQlQuery
            {
                Query = @"mutation ($input: CourseCreateRequestInput!) { createCourse(input: $input) { id title } }",
                Variables = new { input = course }
            };

        var response = await Http.PostAsJsonAsync("https://courses-provider.azurewebsites.net/api/graphql?code=G2MRX03uMzcUwrgGtP75jTVAcUQB_UAz4ze_kHy0dn4JAzFu0doYJw%3D%3D", query);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<GraphQlResponse>();
            if (result?.Data.TryGetProperty("createCourse", out var courseElement) == true)
            {
                createdCourse = new Course
                    {
                        Id = courseElement.GetProperty("id").GetString(),
                        Title = courseElement.GetProperty("title").GetString()
                    };
            }
        }
        else
        {
            // Handle error
        }
    }

    public class CourseCreateRequest
    {
        public string? ImageUri { get; set; }
        public string? ImageHeaderUri { get; set; }
        public bool IsBestseller { get; set; }
        public bool IsDigital { get; set; }
        public string[]? Categories { get; set; }
        public string? Title { get; set; }
        public string? Ingress { get; set; }
        public decimal StarRating { get; set; }
        public string? Reviews { get; set; }
        public string? LikesInPercent { get; set; }
        public string? Likes { get; set; }
        public string? Hours { get; set; }
        public List<AuthorCreateRequest>? Authors { get; set; }
        public PricesCreateRequest? Prices { get; set; }
        public ContentCreateRequest? Content { get; set; }
    }

    public class AuthorCreateRequest
    {
        public string? Name { get; set; }
    }

    public class ContentCreateRequest
    {
        public string? Description { get; set; }
        public string[]? Includes { get; set; }
        public List<ProgramDetailItemCreateRequest>? ProgramDetails { get; set; }
    }

    public class PricesCreateRequest
    {
        public string? Currency { get; set; }
        public decimal Price { get; set; }
        public decimal Discount { get; set; }
    }

    public class ProgramDetailItemCreateRequest
    {
        public int Id { get; set; }
        public string? Title { get; set; }
        public string? Description { get; set; }
    }

    public class Course
    {
        public string? Id { get; set; }
        public string? Title { get; set; }
    }
}
